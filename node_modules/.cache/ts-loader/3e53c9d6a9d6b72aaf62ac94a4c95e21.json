{"remainingRequest":"/home/nebojsa/projects/factory-academy-ts/node_modules/babel-loader/lib/index.js!/home/nebojsa/projects/factory-academy-ts/node_modules/ts-loader/index.js??ref--13-2!/home/nebojsa/projects/factory-academy-ts/src/store/modules/auth/authModule.ts","dependencies":[{"path":"/home/nebojsa/projects/factory-academy-ts/src/store/modules/auth/authModule.ts","mtime":1626178637572},{"path":"/home/nebojsa/projects/factory-academy-ts/node_modules/cache-loader/dist/cjs.js","mtime":499162500000},{"path":"/home/nebojsa/projects/factory-academy-ts/node_modules/babel-loader/lib/index.js","mtime":315532800000},{"path":"/home/nebojsa/projects/factory-academy-ts/node_modules/ts-loader/index.js","mtime":499162500000}],"contextDependencies":[],"result":[{"type":"Buffer","data":"base64:"},{"version":3,"sources":["/home/nebojsa/projects/factory-academy-ts/src/store/modules/auth/authModule.ts"],"names":[],"mappings":"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","sourcesContent":["import { Module, VuexModule, Mutation, Action, getModule } from 'vuex-module-decorators'\nimport store from '@/store'\nimport { authService } from './auth.service'\nimport { TOKEN_LS_NAME } from \"../../../constants/constants\";\nimport SHA512 from \"crypto-js/sha512\";\nimport { Register } from '@/store/models'\n\n@Module({ namespaced: true, name: 'authModule', dynamic: true, store })\nclass AuthModule extends VuexModule {\n\n\tpublic loggedUser: {} | null = null;\n\n\t// getters\n\tget getLoggedUser() {\n\t\treturn this.loggedUser;\n\t}\n\t// END :: getters\n\n\t// mutations\n\t@Mutation\n\tpublic setLoggedUser(loggedUser: {} | null): void {\n\t\tthis.loggedUser = loggedUser\n\t}\n\t// END :: mutation\n\n\t// actions\n\t@Action({ rawError: true })\n\tasync loginAction(payload: {}) {\n\t\ttry {\n\t\t\tlet formData: any = { ...payload };  // this should be changed, should not be any\n\t\t\tformData.password = SHA512(formData.password).toString()\n\t\t\tconst res = await authService.login(formData);\n\t\t\tthis.setLoggedUser(res.data)\n\t\t\tlocalStorage.setItem(TOKEN_LS_NAME, res.data['session-id']);\n\t\t\treturn Promise.resolve(res);\n\t\t} catch (error) {\n\t\t\treturn Promise.reject(error);\n\t\t}\n\t}\n\t@Action({ rawError: true })\n\tasync logout() {\n\t\ttry {\n\t\t\tconst res = await authService.logout();\n\t\t\tthis.setLoggedUser(null);\n\t\t\treturn '/login';\n\t\t} catch (error) {\n\t\t\treturn Promise.reject(error);\n\t\t}\n\t}\n\n\t@Action({ rawError: true })\n\tasync fetchActiveAccount() {\n\t\ttry {\n\t\t\tconst res = await authService.fetchActiveAccount();\n\t\t\tthis.setLoggedUser(res.data)\n\t\t\treturn res;\n\t\t} catch (error) {\n\t\t\treturn Promise.reject(error);\n\t\t}\n\t}\n\n\t@Action({ rawError: true })\n\tasync register(payload: Register) {\n\t\ttry{\n\t\t\tlet formData = { ...payload };\n\t\t\tformData.password = SHA512(formData.password).toString()\n\t\t\tconst res = await authService.register(formData);\n\t\t\treturn Promise.resolve(res);\n\t\t} catch(error) {\n\t\t\treturn Promise.reject(error);\n\t\t}\n\t}\n\n\t// END :: actions\n}\nexport default getModule(AuthModule)"],"sourceRoot":""}]}