{"remainingRequest":"/home/nebojsa/projects/factory-academy-ts/node_modules/babel-loader/lib/index.js!/home/nebojsa/projects/factory-academy-ts/node_modules/ts-loader/index.js??ref--13-2!/home/nebojsa/projects/factory-academy-ts/src/store/modules/course/courseModule.ts","dependencies":[{"path":"/home/nebojsa/projects/factory-academy-ts/src/store/modules/course/courseModule.ts","mtime":1626335935776},{"path":"/home/nebojsa/projects/factory-academy-ts/node_modules/cache-loader/dist/cjs.js","mtime":499162500000},{"path":"/home/nebojsa/projects/factory-academy-ts/node_modules/babel-loader/lib/index.js","mtime":315532800000},{"path":"/home/nebojsa/projects/factory-academy-ts/node_modules/ts-loader/index.js","mtime":499162500000}],"contextDependencies":[],"result":[{"type":"Buffer","data":"base64:"},{"version":3,"sources":["/home/nebojsa/projects/factory-academy-ts/src/store/modules/course/courseModule.ts"],"names":[],"mappings":"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","sourcesContent":["import { Module, VuexModule, Mutation, Action, getModule } from 'vuex-module-decorators'\nimport store from '@/store'\nimport { courseService } from './course.service'\n\n@Module({ namespaced: true, name: 'courseModule', dynamic: true, store })\nclass CourseModule extends VuexModule {\n\n\tpublic singleCourse: {} | null = null;\n    public studentsOnCourseList: {} | [] | null = null;\n    public allCouresList: {} | [] | null = null;\n\n\t// getters\n\t// END :: getters\n\n\t// mutations\n    @Mutation\n    setSingleCourse(singleCourse : {}): void {\n        this.singleCourse = singleCourse;\n    }\n\n    @Mutation\n    parseStudentsOnCourse(studentsOnCourseList: any): void {\n        if(!studentsOnCourseList) {\n            return;\n        }\n        studentsOnCourseList.forEach((student: {}, i: number) => {\n            studentsOnCourseList[i] = {\n                id: studentsOnCourseList[i].user_id,\n                user: studentsOnCourseList[i].user,\n                course_start_date: studentsOnCourseList[i].course_start_date,\n                complete: studentsOnCourseList[i].complete\n            }\n        })\n        this.studentsOnCourseList = studentsOnCourseList;\n    }\n\n    @Mutation\n    parseAllCourses(allCouresList: any): void {\n        if(!allCouresList) {\n            return;\n        }\n        allCouresList.forEach((student: {}, i: number) => {\n            allCouresList[i] = {\n               id: allCouresList[i].id,\n               name: allCouresList[i].name,\n               average_mark: allCouresList[i].average_mark,\n               price: allCouresList[i].price\n           }\n        });\n        this.allCouresList = allCouresList;\n    }\n\t// END :: mutation\n\n\t// actions\n    @Action({ rawError: true })\n    async fetchSingleCours(payload: number) {\n        try{\n            const res = await courseService.fetchSingleCours(payload);\n            this.setSingleCourse(res.data);\n            return Promise.resolve(res);\n        } catch(error) {\n            return Promise.reject(error);\n        }\n    }\n\n    @Action({ rawError: true })\n    async studentsOnCourse(payload: any) {\n        try{\n            const res = await courseService.studentsOnCourse(payload);\n            this.parseStudentsOnCourse(res.data);\n            return Promise.resolve(res.data);\n        } catch(error){\n            return Promise.reject(error);\n        }\n    }\n\n    @Action({ rawError: true })\n    async buyCourse(payload: {}) {\n        try {\n            const res = await courseService.buyCourse(payload);\n            return Promise.resolve(res);\t\n        } catch (error) {\n            return Promise.reject(error);\n        }\n    }\n\n    @Action({ rawError: true })\n    async createCourse(payload: {}) {\n        try{\n            const res = await courseService.createCourse(payload);\n            return Promise.resolve(res);\n\n        } catch(error){\n            return Promise.reject(error);\n        }\n    }\n\n    @Action({ rawError: true })\n    async fetchAllCourses() {\n        try{\n            const res = await courseService.fetchAllCourses();\n            this.parseAllCourses(res.data);\n            return Promise.resolve(res);\n        } catch(error) {\n            return Promise.reject(error);\n        }\n    }\n\n    @Action({ rawError: true })\n    async completeCourse(payload: {}) {\n        try {\n            const res = courseService.completeCourse(payload);\n            return Promise.resolve(res);\n        } catch (error) {\n            return Promise.reject(error);\n        }\n    }\n\t// END :: actions\n}\nexport default getModule(CourseModule)"],"sourceRoot":""}]}