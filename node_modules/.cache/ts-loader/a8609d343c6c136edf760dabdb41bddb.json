{"remainingRequest":"/home/nebojsa/projects/factory-academy-ts/node_modules/babel-loader/lib/index.js!/home/nebojsa/projects/factory-academy-ts/node_modules/ts-loader/index.js??ref--13-2!/home/nebojsa/projects/factory-academy-ts/src/store/modules/person/personModule.ts","dependencies":[{"path":"/home/nebojsa/projects/factory-academy-ts/src/store/modules/person/personModule.ts","mtime":1626437288791},{"path":"/home/nebojsa/projects/factory-academy-ts/node_modules/cache-loader/dist/cjs.js","mtime":499162500000},{"path":"/home/nebojsa/projects/factory-academy-ts/node_modules/babel-loader/lib/index.js","mtime":315532800000},{"path":"/home/nebojsa/projects/factory-academy-ts/node_modules/ts-loader/index.js","mtime":499162500000}],"contextDependencies":[],"result":[{"type":"Buffer","data":"base64:"},{"version":3,"sources":["/home/nebojsa/projects/factory-academy-ts/src/store/modules/person/personModule.ts"],"names":[],"mappings":"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","sourcesContent":["import { Module, VuexModule, Mutation, Action, getModule } from 'vuex-module-decorators'\nimport store from '@/store'\nimport { personService } from './person.service'\n\n@Module({ namespaced: true, name: 'personModule', dynamic: true, store })\nclass PersonModule extends VuexModule {\n\n\tpublic myCourses: {} | null = null;\n    public profileData: {} | null = null;\n    public completedCourses: [] | {} | null = null;\n    public myStudents: [] | {} | null = null;\n    public aplicationRequests: [] | {} | null = null;\n    public notCompletedCourses: [] | {} | null = null;\n\n\t// getters\n    get getMyCourses() {\n        return this.myCourses;\n    }\n    get getNotCompletedCourses() {\n        return this.notCompletedCourses;\n    }\n\t// END :: getters\n\n\t// mutations\n    @Mutation\n    public setProfileData(profileData: {}) {\n        this.profileData = profileData;\n    }\n\n    @Mutation\n    public parseMyCourses(myCourses: [] | any): void {\n        if(!myCourses) {\n            return;\n        }\n        myCourses.forEach((course: {}, i: number) => {\n            myCourses[i] = {\n                id: myCourses[i].id,\n                name: myCourses[i].name,\n                average_mark: myCourses[i].average_mark,\n                price: myCourses[i].price\n            }\n        })\n        this.myCourses = myCourses;\n    }\n\n    @Mutation\n    parseMyStudents(myStudents: [] | any): void {\n        if(!myStudents) {\n            return;\n        }\n        myStudents.forEach((student: {}, i: number) => {\n            myStudents[i] = {\n                user_id: myStudents[i].user_id,\n                user: myStudents[i].user,\n                course_name: myStudents[i].course_name,\n                course_start_date: myStudents[i].course_start_date\n            }\n        })\n        this.myStudents = myStudents;\n    }\n\n    @Mutation\n    public parseCompletedCourses(completedCourses: [] | any): void {\n        if(!completedCourses) {\n            return;\n        }\n        completedCourses.forEach((course: {}, i: number) => {\n            completedCourses[i] = {\n                course_id: completedCourses[i].course.id,\n                course_name: completedCourses[i].course.name,\n                mark: completedCourses[i].mark,\n            }\n        })\n        this.completedCourses = completedCourses;\n    }\n\n    @Mutation\n    public parseAplicationRequests(aplicationRequests: [] | any): void {\n        if(!aplicationRequests) {\n            return;\n        }\n        aplicationRequests.forEach((aplication: {}, i: number) => {\n            aplicationRequests[i] = {\n                student_id: aplicationRequests[i].student_id,\n                course_id: aplicationRequests[i].course_id,\n                accepted: aplicationRequests[i].accepted,\n            }\n        });\n        this.aplicationRequests = aplicationRequests;\n    }\n\n    @Mutation\n    public parsenotCompletedCourses(notCompletedCourses: [] | any): void  {\n        if(!notCompletedCourses) {\n            return;\n        }\n        notCompletedCourses.forEach((course: {}, i: number) => {\n            notCompletedCourses[i] = {\n                course_id: notCompletedCourses[i].course_id,\n                course_name: notCompletedCourses[i].course_name,\n                teacher_name: notCompletedCourses[i].teacher_name,\n                average_mark: notCompletedCourses[i].average_mark,\n                price: notCompletedCourses[i].price\n            }\n        })\n        this.notCompletedCourses = notCompletedCourses;\n    }\n\t// END :: mutation\n\n\t// actions\n    @Action({ rawError: true })\n    async fetchMyCourses(payload: any) {\n        try {\n            const res = await personService.fetchMyCourses(payload);\n            this.parseMyCourses(res.data);\n            return Promise.resolve(res);\n        } catch(error) {\n            return Promise.reject(error);\n        }\n    }\n\n    @Action({ rawError: true })\n    async goProfile(payload: number) {\n        try {\n            const res = await personService.goProfile(payload);\n            this.setProfileData(res.data);\n            return Promise.resolve(res);\n        } catch (error) {\n            return Promise.reject(error);\n        }\n    }\n\n    @Action({ rawError: true })\n    async fetchMyStudents() {\n        try {\n            const res = await personService.fetchMyStudents();\n            this.parseMyStudents(res.data);\n            return Promise.resolve(res);\n        } catch (error) {\n            return Promise.reject(error);\n        }\n    }\n\n    @Action({ rawError: true })\n    async fetchNotCompletedCourses() {\n        try {\n            const res = await personService.fetchNotCompletedCourses();\n            this.parsenotCompletedCourses(res.data);\n            return Promise.resolve(res);\n        } catch (error) {\n            return Promise.reject(error);\n        }\n    }\n\n    @Action({ rawError: true })\n    async fetchCompletedCourses(id: number) {\n        try {\n            const res = await personService.fetchCompletedCourses(id);\n            this.parseCompletedCourses(res.data);\n            return Promise.resolve(res);\n        } catch (error) {\n            return Promise.reject(error);\n        }\n    }\n\n    @Action({ rawError: true })\n    async fetchAplicationRequests() {\n        try {\n            const res = await personService.fetchAplicationRequests();\n            this.parseAplicationRequests(res.data);\n            return Promise.resolve(res);\n        } catch (error) {\n            return Promise.reject(error);\n        }\n    }\n\n    @Action({ rawError: true })\n    async resolveRequest(payload: any) {\n        try {\n            const res = personService.resolveRequest(payload);\n            return Promise.resolve(res);\n        } catch (error) {\n            return Promise.reject(error);\n        }\n    }\n\t// END :: actions\n}\nexport default getModule(PersonModule)"],"sourceRoot":""}]}